/*
 * @(#)JIntegerTextField.java  1.0  August 1, 2007
 *
 * Copyright (c) 2007 Werner Randelshofer
 * Staldenmattweg 2, CH-6405 Immensee, Switzerland
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Werner Randelshofer. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Werner Randelshofer.
 */

package org.jhotdraw.gui;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.text.*;

/**
 * A JTextField which only accepts integer values as input.
 * <p>
 * Use methods setValue/getValue to retrieve the integer value of the
 * JTextField.
 *
 * @author Werner Randelshofer
 * @version 1.0 August 1, 2007 Created.
 */
public class JDoubleTextField extends JTextField {
    private double value;
    private double minimum = Double.MIN_VALUE;
    private double maximum = Double.MAX_VALUE;
    
    private class DocumentHandler implements DocumentListener {
        public void insertUpdate(DocumentEvent e) {
            updateValue();
        }
        
        public void removeUpdate(DocumentEvent e) {
            updateValue();
        }
        
        public void changedUpdate(DocumentEvent e) {
            updateValue();
        }
        
    };
    private DocumentHandler documentHandler;
    
    /** Creates new instance. */
    public JDoubleTextField() {
        initComponents();
        
        addFocusListener(new FocusListener() {
            public void focusGained(FocusEvent e) {
                selectAll();
            }
            
            public void focusLost(FocusEvent e) {
                updateText();
            }
            
        });
    }
    
    public void setDocument(Document newValue) {
        Document oldValue = getDocument();
        super.setDocument(newValue);
        
        if (documentHandler == null) {
            documentHandler = new DocumentHandler();
        }
        
        if (oldValue != null) {
            oldValue.removeDocumentListener(documentHandler);
        }
        if (newValue != null) {
            newValue.addDocumentListener(documentHandler);
        }
        updateValue();
    }
    
    protected void updateValue() {
        try {
            double newValue = Double.valueOf(getText());
            if (newValue >= minimum && newValue <= maximum) {
                setValue(newValue);
            }
        } catch (NumberFormatException ex) {
            //ex.printStackTrace(); do nothing
        }
    }
    
    protected void updateText() {
        if (! isFocusOwner()) {
            String text = Double.toString(value);
            if (text.endsWith(".0")) {
                text = text.substring(0, text.length() - 2);
            }
            setText(text);
        }
    }
    
    public void setValue(double newValue) {
        double oldValue = value;
        value = newValue;
        
        if (newValue != oldValue) {
            firePropertyChange("value", oldValue, newValue);
            updateText();
        }
    }
    
    public double getValue() {
        return value;
    }
    
    public void setMinimum(double newValue) {
        double oldValue = value;
        minimum = newValue;
        firePropertyChange("minimum", oldValue, newValue);
    }
    
    public double getMinimum() {
        return minimum;
    }
    
    public void setMaximum(double newValue) {
        double oldValue = value;
        maximum = newValue;
        firePropertyChange("maximum", oldValue, newValue);
    }
    
    public double getMaximum() {
        return maximum;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
