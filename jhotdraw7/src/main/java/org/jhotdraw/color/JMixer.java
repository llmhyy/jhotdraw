/**
 * @(#)JMixer.java  1.0  April 19, 2008
 *
 * Copyright (c) 2008 Werner Randelshofer
 * Staldenmattweg 2, CH-6405 Immensee, Switzerland
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Werner Randelshofer. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Werner Randelshofer.
 */
package org.jhotdraw.color;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.*;
import javax.swing.plaf.SliderUI;

/**
 * JMixer.
 *
 * @author Werner Randelshofer
 * @version 1.0 JMixer Created.
 */
public class JMixer extends javax.swing.JPanel {

    private JList swatchesList;

    /** Creates new form. */
    public JMixer() {
        initComponents();

        Font smallFont = new Font("Lucida Grande", Font.PLAIN, 11);
        for (Component c : mixerPanel.getComponents()) {
            c.setFont(smallFont);
        }

        // Create a list, overriding the getToolTipText() method
        swatchesList = new JList() {
            // This method is called as the cursor moves within the list.
            @Override
            public String getToolTipText(MouseEvent evt) {
                // Get item index
                int index = locationToIndex(evt.getPoint());

                // Get item
                Object item = getModel().getElementAt(index);

                JComponent c = (JComponent) getCellRenderer().getListCellRendererComponent(this, item, index, false, false);

                // Return the tool tip text
                return c.getToolTipText();
            }
        };
        swatchesList.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        swatchesList.setVisibleRowCount(5);
        scrollPane.setViewportView(swatchesList);

        ColorSliderModel m = harmonicWheel.getModel();
        scrollPane.setPreferredSize(new Dimension(100, 100));
        swatchesList.setModel((ListModel) harmonicWheel.getHarmonicColorModel());
        swatchesList.setCellRenderer(new ColorListCellRenderer());

        harmonicWheel.getHarmonicColorModel().addPropertyChangeListener(new PropertyChangeListener() {

            public void propertyChange(PropertyChangeEvent evt) {
                String name = evt.getPropertyName();
            }
        });
        
        harmonicWheel.getHarmonicColorModel().setLightnessRule(new MonochromaticHarmonicRule());
        harmonicWheel.getHarmonicColorModel().setColorSystem(new HSLRYBColorSystem());
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                JFrame f = new JFrame("Mixer");
                f.add(new JMixer());
                f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                f.pack();
                f.setVisible(true);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hueGroup = new javax.swing.ButtonGroup();
        scrollPane = new javax.swing.JScrollPane();
        disclosureButton = new javax.swing.JToggleButton();
        baseColorCombo = new javax.swing.JComboBox();
        mixerPanel = new javax.swing.JPanel();
        harmonicWheel = new org.jhotdraw.color.HarmonicColorWheel();
        customHueRadio = new javax.swing.JRadioButton();
        customHueLabel = new javax.swing.JLabel();
        customHueField = new org.jhotdraw.gui.JDoubleTextField();
        customHueLabel2 = new javax.swing.JLabel();
        analogousRadio = new javax.swing.JRadioButton();
        analogousLabel1 = new javax.swing.JLabel();
        analogousField = new org.jhotdraw.gui.JDoubleTextField();
        analogousLabel2 = new javax.swing.JLabel();
        clashRadio = new javax.swing.JRadioButton();
        clashLabel1 = new javax.swing.JLabel();
        clashField = new org.jhotdraw.gui.JDoubleTextField();
        clashLabel2 = new javax.swing.JLabel();
        triadRadio = new javax.swing.JRadioButton();
        triadLabel1 = new javax.swing.JLabel();
        triadField = new org.jhotdraw.gui.JDoubleTextField();
        triadLabel2 = new javax.swing.JLabel();
        splitComplementaryRadio = new javax.swing.JRadioButton();
        splitComplementaryLabel1 = new javax.swing.JLabel();
        splitField = new org.jhotdraw.gui.JDoubleTextField();
        splitComplementaryLabel2 = new javax.swing.JLabel();
        complementaryRadio = new javax.swing.JRadioButton();
        complementaryLabel1 = new javax.swing.JLabel();
        complementaryField = new org.jhotdraw.gui.JDoubleTextField();
        complementaryLabel2 = new javax.swing.JLabel();
        achromaticCheck = new javax.swing.JCheckBox();
        achromaticLabel1 = new javax.swing.JLabel();
        achromaticField = new org.jhotdraw.gui.JDoubleTextField();
        achromaticLabel2 = new javax.swing.JLabel();
        monochromaticCheck = new javax.swing.JCheckBox();
        monochromaticLabel1 = new javax.swing.JLabel();
        monochromaticField = new org.jhotdraw.gui.JDoubleTextField();
        monochromaticLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        add(scrollPane, gridBagConstraints);

        disclosureButton.setText("Show Mixer");
        add(disclosureButton, new java.awt.GridBagConstraints());

        baseColorCombo.setEditable(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(baseColorCombo, gridBagConstraints);

        mixerPanel.setLayout(new java.awt.GridBagLayout());

        harmonicWheel.setLayout(new java.awt.FlowLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mixerPanel.add(harmonicWheel, gridBagConstraints);

        hueGroup.add(customHueRadio);
        customHueRadio.setText("Custom");
        customHueRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hueRadioPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(customHueRadio, gridBagConstraints);

        customHueLabel.setText("±");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(customHueLabel, gridBagConstraints);

        customHueField.setColumns(3);
        customHueField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        customHueField.setText("30");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(customHueField, gridBagConstraints);

        customHueLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        customHueLabel2.setText("°");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(customHueLabel2, gridBagConstraints);

        hueGroup.add(analogousRadio);
        analogousRadio.setSelected(true);
        analogousRadio.setText("Analogous");
        analogousRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hueRadioPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(analogousRadio, gridBagConstraints);

        analogousLabel1.setText("±");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(analogousLabel1, gridBagConstraints);

        analogousField.setColumns(3);
        analogousField.setEditable(false);
        analogousField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        analogousField.setText("30");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(analogousField, gridBagConstraints);

        analogousLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        analogousLabel2.setText("°");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(analogousLabel2, gridBagConstraints);

        hueGroup.add(clashRadio);
        clashRadio.setText("Clash");
        clashRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hueRadioPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(clashRadio, gridBagConstraints);

        clashLabel1.setText("±");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(clashLabel1, gridBagConstraints);

        clashField.setColumns(3);
        clashField.setEditable(false);
        clashField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        clashField.setText("90");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(clashField, gridBagConstraints);

        clashLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        clashLabel2.setText("°");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(clashLabel2, gridBagConstraints);

        hueGroup.add(triadRadio);
        triadRadio.setText("Triad");
        triadRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hueRadioPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(triadRadio, gridBagConstraints);

        triadLabel1.setText("±");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(triadLabel1, gridBagConstraints);

        triadField.setColumns(3);
        triadField.setEditable(false);
        triadField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        triadField.setText("120");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(triadField, gridBagConstraints);

        triadLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        triadLabel2.setText("°");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(triadLabel2, gridBagConstraints);

        hueGroup.add(splitComplementaryRadio);
        splitComplementaryRadio.setText("Split");
        splitComplementaryRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hueRadioPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(splitComplementaryRadio, gridBagConstraints);

        splitComplementaryLabel1.setText("±");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(splitComplementaryLabel1, gridBagConstraints);

        splitField.setColumns(3);
        splitField.setEditable(false);
        splitField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        splitField.setText("150");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(splitField, gridBagConstraints);

        splitComplementaryLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        splitComplementaryLabel2.setText("°");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(splitComplementaryLabel2, gridBagConstraints);

        hueGroup.add(complementaryRadio);
        complementaryRadio.setText("Complementary");
        complementaryRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hueRadioPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(complementaryRadio, gridBagConstraints);

        complementaryLabel1.setText("+");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(complementaryLabel1, gridBagConstraints);

        complementaryField.setColumns(3);
        complementaryField.setEditable(false);
        complementaryField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        complementaryField.setText("180");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(complementaryField, gridBagConstraints);

        complementaryLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        complementaryLabel2.setText("°");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(complementaryLabel2, gridBagConstraints);

        achromaticCheck.setText("Achromatic");
        achromaticCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                achromaticCheckPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(achromaticCheck, gridBagConstraints);

        achromaticLabel1.setText("±");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(achromaticLabel1, gridBagConstraints);

        achromaticField.setColumns(3);
        achromaticField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        achromaticField.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(achromaticField, gridBagConstraints);

        achromaticLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        achromaticLabel2.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(achromaticLabel2, gridBagConstraints);

        monochromaticCheck.setSelected(true);
        monochromaticCheck.setText("Monochromatic");
        monochromaticCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monochromaticCheckPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(monochromaticCheck, gridBagConstraints);

        monochromaticLabel1.setText("±");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(monochromaticLabel1, gridBagConstraints);

        monochromaticField.setColumns(3);
        monochromaticField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        monochromaticField.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        mixerPanel.add(monochromaticField, gridBagConstraints);

        monochromaticLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        monochromaticLabel2.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mixerPanel.add(monochromaticLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weighty = 1.0;
        mixerPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.5;
        add(mixerPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void hueRadioPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hueRadioPerformed
        HarmonicColorModel m = harmonicWheel.getHarmonicColorModel();
        if (customHueRadio.isSelected()) {
            m.setHueRule(new CustomHueHarmonicRule(30f / 360f));
        } else if (analogousRadio.isSelected()) {
            m.setHueRule(new HueHarmonicRule(30f / 360f));
        } else if (clashRadio.isSelected()) {
            m.setHueRule(new HueHarmonicRule(90f / 360f));
        } else if (triadRadio.isSelected()) {
            m.setHueRule(new HueHarmonicRule(120f / 360f));
        } else if (splitComplementaryRadio.isSelected()) {
            m.setHueRule(new HueHarmonicRule(150f / 360f));
        } else if (complementaryRadio.isSelected()) {
            m.setHueRule(new HueHarmonicRule(180f / 360f));
        }
}//GEN-LAST:event_hueRadioPerformed

    private void achromaticCheckPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_achromaticCheckPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_achromaticCheckPerformed

    private void monochromaticCheckPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monochromaticCheckPerformed
        HarmonicColorModel m = harmonicWheel.getHarmonicColorModel();
    if (monochromaticCheck.isSelected()) {
m.setLightnessRule(new MonochromaticHarmonicRule());        
    } else {
        m.setLightnessRule(null);
    }
}//GEN-LAST:event_monochromaticCheckPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox achromaticCheck;
    private org.jhotdraw.gui.JDoubleTextField achromaticField;
    private javax.swing.JLabel achromaticLabel1;
    private javax.swing.JLabel achromaticLabel2;
    private org.jhotdraw.gui.JDoubleTextField analogousField;
    private javax.swing.JLabel analogousLabel1;
    private javax.swing.JLabel analogousLabel2;
    private javax.swing.JRadioButton analogousRadio;
    private javax.swing.JComboBox baseColorCombo;
    private org.jhotdraw.gui.JDoubleTextField clashField;
    private javax.swing.JLabel clashLabel1;
    private javax.swing.JLabel clashLabel2;
    private javax.swing.JRadioButton clashRadio;
    private org.jhotdraw.gui.JDoubleTextField complementaryField;
    private javax.swing.JLabel complementaryLabel1;
    private javax.swing.JLabel complementaryLabel2;
    private javax.swing.JRadioButton complementaryRadio;
    private org.jhotdraw.gui.JDoubleTextField customHueField;
    private javax.swing.JLabel customHueLabel;
    private javax.swing.JLabel customHueLabel2;
    private javax.swing.JRadioButton customHueRadio;
    private javax.swing.JToggleButton disclosureButton;
    private org.jhotdraw.color.HarmonicColorWheel harmonicWheel;
    private javax.swing.ButtonGroup hueGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel mixerPanel;
    private javax.swing.JCheckBox monochromaticCheck;
    private org.jhotdraw.gui.JDoubleTextField monochromaticField;
    private javax.swing.JLabel monochromaticLabel1;
    private javax.swing.JLabel monochromaticLabel2;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JLabel splitComplementaryLabel1;
    private javax.swing.JLabel splitComplementaryLabel2;
    private javax.swing.JRadioButton splitComplementaryRadio;
    private org.jhotdraw.gui.JDoubleTextField splitField;
    private org.jhotdraw.gui.JDoubleTextField triadField;
    private javax.swing.JLabel triadLabel1;
    private javax.swing.JLabel triadLabel2;
    private javax.swing.JRadioButton triadRadio;
    // End of variables declaration//GEN-END:variables
}
